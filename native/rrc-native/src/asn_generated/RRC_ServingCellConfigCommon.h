/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "asn/nr-rrc-15.6.0.asn1"
 * 	`asn1c -fcompound-names -pdu=all -findirect-choice -fno-include-deps -gen-PER -no-gen-OER -no-gen-example -D rrc`
 */

#ifndef	_RRC_ServingCellConfigCommon_H_
#define	_RRC_ServingCellConfigCommon_H_


#include <asn_application.h>

/* Including external dependencies */
#include "RRC_PhysCellId.h"
#include <NativeEnumerated.h>
#include "RRC_SubcarrierSpacing.h"
#include <NativeInteger.h>
#include <BIT_STRING.h>
#include <constr_CHOICE.h>
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include "RRC_RateMatchPatternId.h"
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum RRC_ServingCellConfigCommon__n_TimingAdvanceOffset {
	RRC_ServingCellConfigCommon__n_TimingAdvanceOffset_n0	= 0,
	RRC_ServingCellConfigCommon__n_TimingAdvanceOffset_n25600	= 1,
	RRC_ServingCellConfigCommon__n_TimingAdvanceOffset_n39936	= 2
} e_RRC_ServingCellConfigCommon__n_TimingAdvanceOffset;
typedef enum RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR {
	RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR_NOTHING,	/* No components present */
	RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR_shortBitmap,
	RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR_mediumBitmap,
	RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR_longBitmap
} RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR;
typedef enum RRC_ServingCellConfigCommon__ssb_periodicityServingCell {
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms5	= 0,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms10	= 1,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms20	= 2,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms40	= 3,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms80	= 4,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_ms160	= 5,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_spare2	= 6,
	RRC_ServingCellConfigCommon__ssb_periodicityServingCell_spare1	= 7
} e_RRC_ServingCellConfigCommon__ssb_periodicityServingCell;
typedef enum RRC_ServingCellConfigCommon__dmrs_TypeA_Position {
	RRC_ServingCellConfigCommon__dmrs_TypeA_Position_pos2	= 0,
	RRC_ServingCellConfigCommon__dmrs_TypeA_Position_pos3	= 1
} e_RRC_ServingCellConfigCommon__dmrs_TypeA_Position;

/* Forward declarations */
struct RRC_DownlinkConfigCommon;
struct RRC_UplinkConfigCommon;
struct RRC_SetupRelease_RateMatchPatternLTE_CRS;
struct RRC_TDD_UL_DL_ConfigCommon;
struct RRC_RateMatchPattern;

/* RRC_ServingCellConfigCommon */
typedef struct RRC_ServingCellConfigCommon {
	RRC_PhysCellId_t	*physCellId;	/* OPTIONAL */
	struct RRC_DownlinkConfigCommon	*downlinkConfigCommon;	/* OPTIONAL */
	struct RRC_UplinkConfigCommon	*uplinkConfigCommon;	/* OPTIONAL */
	struct RRC_UplinkConfigCommon	*supplementaryUplinkConfig;	/* OPTIONAL */
	long	*n_TimingAdvanceOffset;	/* OPTIONAL */
	struct RRC_ServingCellConfigCommon__ssb_PositionsInBurst {
		RRC_ServingCellConfigCommon__ssb_PositionsInBurst_PR present;
		union RRC_ServingCellConfigCommon__RRC_ssb_PositionsInBurst_u {
			BIT_STRING_t	 shortBitmap;
			BIT_STRING_t	 mediumBitmap;
			BIT_STRING_t	 longBitmap;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ssb_PositionsInBurst;
	long	*ssb_periodicityServingCell;	/* OPTIONAL */
	long	 dmrs_TypeA_Position;
	struct RRC_SetupRelease_RateMatchPatternLTE_CRS	*lte_CRS_ToMatchAround;	/* OPTIONAL */
	struct RRC_ServingCellConfigCommon__rateMatchPatternToAddModList {
		A_SEQUENCE_OF(struct RRC_RateMatchPattern) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *rateMatchPatternToAddModList;
	struct RRC_ServingCellConfigCommon__rateMatchPatternToReleaseList {
		A_SEQUENCE_OF(RRC_RateMatchPatternId_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *rateMatchPatternToReleaseList;
	RRC_SubcarrierSpacing_t	*ssbSubcarrierSpacing;	/* OPTIONAL */
	struct RRC_TDD_UL_DL_ConfigCommon	*tdd_UL_DL_ConfigurationCommon;	/* OPTIONAL */
	long	 ss_PBCH_BlockPower;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} RRC_ServingCellConfigCommon_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_RRC_n_TimingAdvanceOffset_6;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_RRC_ssb_periodicityServingCell_14;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_RRC_dmrs_TypeA_Position_23;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_RRC_ServingCellConfigCommon;
extern asn_SEQUENCE_specifics_t asn_SPC_RRC_ServingCellConfigCommon_specs_1;
extern asn_TYPE_member_t asn_MBR_RRC_ServingCellConfigCommon_1[14];

#ifdef __cplusplus
}
#endif

#endif	/* _RRC_ServingCellConfigCommon_H_ */
#include <asn_internal.h>
