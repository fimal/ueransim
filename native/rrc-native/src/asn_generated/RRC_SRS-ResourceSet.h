/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-RRC-Definitions"
 * 	found in "asn/nr-rrc-15.6.0.asn1"
 * 	`asn1c -fcompound-names -pdu=all -findirect-choice -fno-include-deps -gen-PER -no-gen-OER -no-gen-example -D rrc`
 */

#ifndef	_RRC_SRS_ResourceSet_H_
#define	_RRC_SRS_ResourceSet_H_


#include <asn_application.h>

/* Including external dependencies */
#include "RRC_SRS-ResourceSetId.h"
#include <NativeEnumerated.h>
#include "RRC_Alpha.h"
#include <NativeInteger.h>
#include "RRC_SRS-ResourceId.h"
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include "RRC_NZP-CSI-RS-ResourceId.h"
#include <constr_SEQUENCE.h>
#include <constr_CHOICE.h>
#include "RRC_SSB-Index.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum RRC_SRS_ResourceSet__resourceType_PR {
	RRC_SRS_ResourceSet__resourceType_PR_NOTHING,	/* No components present */
	RRC_SRS_ResourceSet__resourceType_PR_aperiodic,
	RRC_SRS_ResourceSet__resourceType_PR_semi_persistent,
	RRC_SRS_ResourceSet__resourceType_PR_periodic
} RRC_SRS_ResourceSet__resourceType_PR;
typedef enum RRC_SRS_ResourceSet__usage {
	RRC_SRS_ResourceSet__usage_beamManagement	= 0,
	RRC_SRS_ResourceSet__usage_codebook	= 1,
	RRC_SRS_ResourceSet__usage_nonCodebook	= 2,
	RRC_SRS_ResourceSet__usage_antennaSwitching	= 3
} e_RRC_SRS_ResourceSet__usage;
typedef enum RRC_SRS_ResourceSet__pathlossReferenceRS_PR {
	RRC_SRS_ResourceSet__pathlossReferenceRS_PR_NOTHING,	/* No components present */
	RRC_SRS_ResourceSet__pathlossReferenceRS_PR_ssb_Index,
	RRC_SRS_ResourceSet__pathlossReferenceRS_PR_csi_RS_Index
} RRC_SRS_ResourceSet__pathlossReferenceRS_PR;
typedef enum RRC_SRS_ResourceSet__srs_PowerControlAdjustmentStates {
	RRC_SRS_ResourceSet__srs_PowerControlAdjustmentStates_sameAsFci2	= 0,
	RRC_SRS_ResourceSet__srs_PowerControlAdjustmentStates_separateClosedLoop	= 1
} e_RRC_SRS_ResourceSet__srs_PowerControlAdjustmentStates;

/* RRC_SRS-ResourceSet */
typedef struct RRC_SRS_ResourceSet {
	RRC_SRS_ResourceSetId_t	 srs_ResourceSetId;
	struct RRC_SRS_ResourceSet__srs_ResourceIdList {
		A_SEQUENCE_OF(RRC_SRS_ResourceId_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *srs_ResourceIdList;
	struct RRC_SRS_ResourceSet__resourceType {
		RRC_SRS_ResourceSet__resourceType_PR present;
		union RRC_SRS_ResourceSet__RRC_resourceType_u {
			struct RRC_SRS_ResourceSet__resourceType__aperiodic {
				long	 aperiodicSRS_ResourceTrigger;
				RRC_NZP_CSI_RS_ResourceId_t	*csi_RS;	/* OPTIONAL */
				long	*slotOffset;	/* OPTIONAL */
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				struct RRC_SRS_ResourceSet__resourceType__aperiodic__ext1 {
					struct RRC_SRS_ResourceSet__resourceType__aperiodic__ext1__aperiodicSRS_ResourceTriggerList_v1530 {
						A_SEQUENCE_OF(long) list;
						
						/* Context for parsing across buffer boundaries */
						asn_struct_ctx_t _asn_ctx;
					} *aperiodicSRS_ResourceTriggerList_v1530;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} *ext1;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *aperiodic;
			struct RRC_SRS_ResourceSet__resourceType__semi_persistent {
				RRC_NZP_CSI_RS_ResourceId_t	*associatedCSI_RS;	/* OPTIONAL */
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *semi_persistent;
			struct RRC_SRS_ResourceSet__resourceType__periodic {
				RRC_NZP_CSI_RS_ResourceId_t	*associatedCSI_RS;	/* OPTIONAL */
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} *periodic;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} resourceType;
	long	 usage;
	RRC_Alpha_t	*alpha;	/* OPTIONAL */
	long	*p0;	/* OPTIONAL */
	struct RRC_SRS_ResourceSet__pathlossReferenceRS {
		RRC_SRS_ResourceSet__pathlossReferenceRS_PR present;
		union RRC_SRS_ResourceSet__RRC_pathlossReferenceRS_u {
			RRC_SSB_Index_t	 ssb_Index;
			RRC_NZP_CSI_RS_ResourceId_t	 csi_RS_Index;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *pathlossReferenceRS;
	long	*srs_PowerControlAdjustmentStates;	/* OPTIONAL */
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} RRC_SRS_ResourceSet_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_RRC_usage_20;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_RRC_srs_PowerControlAdjustmentStates_30;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_RRC_SRS_ResourceSet;
extern asn_SEQUENCE_specifics_t asn_SPC_RRC_SRS_ResourceSet_specs_1;
extern asn_TYPE_member_t asn_MBR_RRC_SRS_ResourceSet_1[8];

#ifdef __cplusplus
}
#endif

#endif	/* _RRC_SRS_ResourceSet_H_ */
#include <asn_internal.h>
